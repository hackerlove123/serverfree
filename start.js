const { exec, spawn } = require("child_process");
const TelegramBot = require('node-telegram-bot-api');

// C·∫•u h√¨nh
const BOT_TOKEN = "7828296793:AAEw4A7NI8tVrdrcR0TQZXyOpNSPbJmbGUU"; // Thay th·∫ø b·∫±ng token c·ªßa b·∫°n
const GROUP_CHAT_ID = -1002423723717; // Thay th·∫ø b·∫±ng ID nh√≥m c·ªßa b·∫°n

// Kh·ªüi t·∫°o bot Telegram
const bot = new TelegramBot(BOT_TOKEN, { polling: true });

// Bi·∫øn to√†n c·ª•c
let publicUrl = null; // L∆∞u tr·ªØ URL t·ª´ Cloudflare Tunnel
let isReady = false; // Tr·∫°ng th√°i bot ƒë√£ s·∫µn s√†ng hay ch∆∞a

// --------------------- H√†m g·ª≠i tin nh·∫Øn ---------------------
const sendTelegramMessage = async (chatId, message) => {
    try {
        await bot.sendMessage(chatId, message);
        console.log("Tin nh·∫Øn ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng!");
    } catch (error) {
        console.error("L·ªói khi g·ª≠i tin nh·∫Øn:", error);
    }
};

// --------------------- H√†m ki·ªÉm tra code-server ---------------------
const waitForCodeServer = () => new Promise((resolve, reject) => {
    console.log("üïí ƒêang ki·ªÉm tra code-server...");
    const checkServer = setInterval(() => {
        exec("curl -s http://localhost:8080", (error) => {
            if (!error) {
                clearInterval(checkServer);
                console.log("‚úÖ Code-server ƒë√£ s·∫µn s√†ng!");
                resolve();
            }
        });
    }, 1000);

    // Timeout sau 30 gi√¢y
    setTimeout(() => {
        clearInterval(checkServer);
        reject(new Error("Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn code-server sau 30 gi√¢y."));
    }, 30000);
});

// --------------------- H√†m kh·ªüi ch·∫°y Cloudflare Tunnel ---------------------
const startCloudflaredTunnel = (port) => {
    console.log("üöÄ ƒêang kh·ªüi ch·∫°y Cloudflare Tunnel...");
    const cloudflaredProcess = spawn("cloudflared", ["tunnel", "--url", `http://localhost:${port}`]);

    const handleOutput = (output) => {
        console.log(`[cloudflared] ${output}`); // Log to√†n b·ªô ƒë·∫ßu ra ƒë·ªÉ debug

        // Ki·ªÉm tra xem ƒë·∫ßu ra c√≥ ch·ª©a URL kh√¥ng
        if (output.includes("https://")) {
            const urlMatch = output.match(/https:\/\/[^\s]+/); // Tr√≠ch xu·∫•t URL
            if (urlMatch) {
                publicUrl = `${urlMatch[0].trim()}/?folder=/NeganServer`; // L∆∞u URL
                console.log(`üåê Public URL: ${publicUrl}`);

                // G·ª≠i th√¥ng b√°o ho√†n t·∫•t
                sendTelegramMessage(
                    GROUP_CHAT_ID,
                    `üéâ **Server ƒë√£ s·∫µn s√†ng!**\n` +
                    `üëâ H√£y g·ªçi l·ªánh /getlink ƒë·ªÉ nh·∫≠n Public URL.\n` +
                    `üîó URL s·∫Ω ƒë∆∞·ª£c g·ª≠i ri√™ng cho b·∫°n qua tin nh·∫Øn c√° nh√¢n.`
                );

                isReady = true; // ƒê√°nh d·∫•u bot ƒë√£ s·∫µn s√†ng
            }
        }
    };

    cloudflaredProcess.stdout.on("data", (data) => handleOutput(data.toString()));
    cloudflaredProcess.stderr.on("data", (data) => handleOutput(data.toString()));
    cloudflaredProcess.on("close", (code) => {
        console.log(`Cloudflared ƒë√£ ƒë√≥ng v·ªõi m√£ ${code}`);
        sendTelegramMessage(GROUP_CHAT_ID, `üî¥ CLF ƒë√£ ƒë√≥ng v·ªõi m√£ ${code}`);
    });
};

// --------------------- H√†m kh·ªüi ch·∫°y code-server v√† Cloudflare Tunnel ---------------------
const startCodeServerAndCloudflared = async () => {
    try {
        console.log("üöÄ ƒêang kh·ªüi ch·∫°y code-server...");
        await sendTelegramMessage(GROUP_CHAT_ID, "üîÑ ƒêang kh·ªüi ch·∫°y Server...");

        const codeServerProcess = exec("code-server --bind-addr 0.0.0.0:8080 --auth none");

        // B·ªè qua l·ªói t·ª´ code-server
        codeServerProcess.stderr.on("data", () => {});

        // ƒê·ª£i code-server kh·ªüi ƒë·ªông
        await waitForCodeServer();
        console.log("‚úÖ Code-server ƒë√£ s·∫µn s√†ng!");
        await sendTelegramMessage(GROUP_CHAT_ID, "‚úÖ Server ƒë√£ s·∫µn s√†ng");

        console.log("üöÄ ƒêang kh·ªüi ch·∫°y Cloudflare Tunnel...");
        await sendTelegramMessage(GROUP_CHAT_ID, "üîÑ ƒêang thi·∫øt l·∫≠p Cloudflare Tunnel...");

        startCloudflaredTunnel(8080);
    } catch (error) {
        console.error("‚ùå L·ªói trong qu√° tr√¨nh kh·ªüi ch·∫°y:", error);
        await sendTelegramMessage(GROUP_CHAT_ID, `‚ùå L·ªói trong qu√° tr√¨nh kh·ªüi ch·∫°y: ${error.message}`);
    }
};

// --------------------- X·ª≠ l√Ω l·ªánh /getlink ---------------------
bot.onText(/\/getlink/, async (msg) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;

    // Ch·ªâ x·ª≠ l√Ω l·ªánh n·∫øu bot ƒë√£ s·∫µn s√†ng
    if (isReady && chatId === GROUP_CHAT_ID) {
        if (publicUrl) {
            await bot.sendMessage(
                userId,
                `üëâ Truy c·∫≠p v√† s·ª≠ d·ª•ng Server Free t·∫°i üëá\nüåê Public URL: ${publicUrl}`
            );

            // Sau khi g·ª≠i link, d·ª´ng bot b·∫±ng c√°ch kill ti·∫øn tr√¨nh
            console.log("üõë ƒêang d·ª´ng bot...");
            exec("pkill -f -9 start.js", (error) => {
                if (error) {
                    console.error(`‚ùå L·ªói khi d·ª´ng bot: ${error.message}`);
                } else {
                    console.log("‚úÖ Bot ƒë√£ d·ª´ng th√†nh c√¥ng.");
                }
            });
        } else {
            await bot.sendMessage(
                userId,
                "‚ùå URL ch∆∞a s·∫µn s√†ng. Vui l√≤ng th·ª≠ l·∫°i sau."
            );
        }
    }
});

// --------------------- Kh·ªüi ch·∫°y ch∆∞∆°ng tr√¨nh ---------------------
startCodeServerAndCloudflared();
